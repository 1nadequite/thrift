#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from tutorial import UserManager
from tutorial.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void ping()')
  print('  i32 user_connect(string u)')
  print('  i32 user_disconnect(string u)')
  print('  i32 add_user(User u)')
  print('   get_all_users()')
  print('   last_messages()')
  print('  void print_message(Message m)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = UserManager.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'user_connect':
  if len(args) != 1:
    print('user_connect requires 1 args')
    sys.exit(1)
  pp.pprint(client.user_connect(args[0],))

elif cmd == 'user_disconnect':
  if len(args) != 1:
    print('user_disconnect requires 1 args')
    sys.exit(1)
  pp.pprint(client.user_disconnect(args[0],))

elif cmd == 'add_user':
  if len(args) != 1:
    print('add_user requires 1 args')
    sys.exit(1)
  pp.pprint(client.add_user(eval(args[0]),))

elif cmd == 'get_all_users':
  if len(args) != 0:
    print('get_all_users requires 0 args')
    sys.exit(1)
  pp.pprint(client.get_all_users())

elif cmd == 'last_messages':
  if len(args) != 0:
    print('last_messages requires 0 args')
    sys.exit(1)
  pp.pprint(client.last_messages())

elif cmd == 'print_message':
  if len(args) != 1:
    print('print_message requires 1 args')
    sys.exit(1)
  pp.pprint(client.print_message(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
