/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserManager_H
#define UserManager_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "tutorial_types.h"

namespace tutorial {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UserManagerIf {
 public:
  virtual ~UserManagerIf() {}
  virtual void ping() = 0;
  virtual int32_t add_user(const User& u) = 0;
  virtual void get_all_users(std::vector<User> & _return) = 0;
  virtual void get_user(User& _return, const int32_t uid) = 0;
  virtual void clear_list() = 0;
};

class UserManagerIfFactory {
 public:
  typedef UserManagerIf Handler;

  virtual ~UserManagerIfFactory() {}

  virtual UserManagerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserManagerIf* /* handler */) = 0;
};

class UserManagerIfSingletonFactory : virtual public UserManagerIfFactory {
 public:
  UserManagerIfSingletonFactory(const boost::shared_ptr<UserManagerIf>& iface) : iface_(iface) {}
  virtual ~UserManagerIfSingletonFactory() {}

  virtual UserManagerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UserManagerIf* /* handler */) {}

 protected:
  boost::shared_ptr<UserManagerIf> iface_;
};

class UserManagerNull : virtual public UserManagerIf {
 public:
  virtual ~UserManagerNull() {}
  void ping() {
    return;
  }
  int32_t add_user(const User& /* u */) {
    int32_t _return = 0;
    return _return;
  }
  void get_all_users(std::vector<User> & /* _return */) {
    return;
  }
  void get_user(User& /* _return */, const int32_t /* uid */) {
    return;
  }
  void clear_list() {
    return;
  }
};


class UserManager_ping_args {
 public:

  UserManager_ping_args(const UserManager_ping_args&);
  UserManager_ping_args& operator=(const UserManager_ping_args&);
  UserManager_ping_args() {
  }

  virtual ~UserManager_ping_args() throw();

  bool operator == (const UserManager_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UserManager_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserManager_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserManager_ping_pargs {
 public:


  virtual ~UserManager_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserManager_ping_result {
 public:

  UserManager_ping_result(const UserManager_ping_result&);
  UserManager_ping_result& operator=(const UserManager_ping_result&);
  UserManager_ping_result() {
  }

  virtual ~UserManager_ping_result() throw();

  bool operator == (const UserManager_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UserManager_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserManager_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserManager_ping_presult {
 public:


  virtual ~UserManager_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserManager_add_user_args__isset {
  _UserManager_add_user_args__isset() : u(false) {}
  bool u :1;
} _UserManager_add_user_args__isset;

class UserManager_add_user_args {
 public:

  UserManager_add_user_args(const UserManager_add_user_args&);
  UserManager_add_user_args& operator=(const UserManager_add_user_args&);
  UserManager_add_user_args() {
  }

  virtual ~UserManager_add_user_args() throw();
  User u;

  _UserManager_add_user_args__isset __isset;

  void __set_u(const User& val);

  bool operator == (const UserManager_add_user_args & rhs) const
  {
    if (!(u == rhs.u))
      return false;
    return true;
  }
  bool operator != (const UserManager_add_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserManager_add_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserManager_add_user_pargs {
 public:


  virtual ~UserManager_add_user_pargs() throw();
  const User* u;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserManager_add_user_result__isset {
  _UserManager_add_user_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _UserManager_add_user_result__isset;

class UserManager_add_user_result {
 public:

  UserManager_add_user_result(const UserManager_add_user_result&);
  UserManager_add_user_result& operator=(const UserManager_add_user_result&);
  UserManager_add_user_result() : success(0) {
  }

  virtual ~UserManager_add_user_result() throw();
  int32_t success;
  InvalidValueException e;

  _UserManager_add_user_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_e(const InvalidValueException& val);

  bool operator == (const UserManager_add_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const UserManager_add_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserManager_add_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserManager_add_user_presult__isset {
  _UserManager_add_user_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _UserManager_add_user_presult__isset;

class UserManager_add_user_presult {
 public:


  virtual ~UserManager_add_user_presult() throw();
  int32_t* success;
  InvalidValueException e;

  _UserManager_add_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class UserManager_get_all_users_args {
 public:

  UserManager_get_all_users_args(const UserManager_get_all_users_args&);
  UserManager_get_all_users_args& operator=(const UserManager_get_all_users_args&);
  UserManager_get_all_users_args() {
  }

  virtual ~UserManager_get_all_users_args() throw();

  bool operator == (const UserManager_get_all_users_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UserManager_get_all_users_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserManager_get_all_users_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserManager_get_all_users_pargs {
 public:


  virtual ~UserManager_get_all_users_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserManager_get_all_users_result__isset {
  _UserManager_get_all_users_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _UserManager_get_all_users_result__isset;

class UserManager_get_all_users_result {
 public:

  UserManager_get_all_users_result(const UserManager_get_all_users_result&);
  UserManager_get_all_users_result& operator=(const UserManager_get_all_users_result&);
  UserManager_get_all_users_result() {
  }

  virtual ~UserManager_get_all_users_result() throw();
  std::vector<User>  success;
  InvalidValueException e;

  _UserManager_get_all_users_result__isset __isset;

  void __set_success(const std::vector<User> & val);

  void __set_e(const InvalidValueException& val);

  bool operator == (const UserManager_get_all_users_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const UserManager_get_all_users_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserManager_get_all_users_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserManager_get_all_users_presult__isset {
  _UserManager_get_all_users_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _UserManager_get_all_users_presult__isset;

class UserManager_get_all_users_presult {
 public:


  virtual ~UserManager_get_all_users_presult() throw();
  std::vector<User> * success;
  InvalidValueException e;

  _UserManager_get_all_users_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserManager_get_user_args__isset {
  _UserManager_get_user_args__isset() : uid(false) {}
  bool uid :1;
} _UserManager_get_user_args__isset;

class UserManager_get_user_args {
 public:

  UserManager_get_user_args(const UserManager_get_user_args&);
  UserManager_get_user_args& operator=(const UserManager_get_user_args&);
  UserManager_get_user_args() : uid(0) {
  }

  virtual ~UserManager_get_user_args() throw();
  int32_t uid;

  _UserManager_get_user_args__isset __isset;

  void __set_uid(const int32_t val);

  bool operator == (const UserManager_get_user_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const UserManager_get_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserManager_get_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserManager_get_user_pargs {
 public:


  virtual ~UserManager_get_user_pargs() throw();
  const int32_t* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserManager_get_user_result__isset {
  _UserManager_get_user_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _UserManager_get_user_result__isset;

class UserManager_get_user_result {
 public:

  UserManager_get_user_result(const UserManager_get_user_result&);
  UserManager_get_user_result& operator=(const UserManager_get_user_result&);
  UserManager_get_user_result() {
  }

  virtual ~UserManager_get_user_result() throw();
  User success;
  InvalidValueException e;

  _UserManager_get_user_result__isset __isset;

  void __set_success(const User& val);

  void __set_e(const InvalidValueException& val);

  bool operator == (const UserManager_get_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const UserManager_get_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserManager_get_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserManager_get_user_presult__isset {
  _UserManager_get_user_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _UserManager_get_user_presult__isset;

class UserManager_get_user_presult {
 public:


  virtual ~UserManager_get_user_presult() throw();
  User* success;
  InvalidValueException e;

  _UserManager_get_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class UserManager_clear_list_args {
 public:

  UserManager_clear_list_args(const UserManager_clear_list_args&);
  UserManager_clear_list_args& operator=(const UserManager_clear_list_args&);
  UserManager_clear_list_args() {
  }

  virtual ~UserManager_clear_list_args() throw();

  bool operator == (const UserManager_clear_list_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UserManager_clear_list_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserManager_clear_list_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserManager_clear_list_pargs {
 public:


  virtual ~UserManager_clear_list_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class UserManagerClient : virtual public UserManagerIf {
 public:
  UserManagerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserManagerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  int32_t add_user(const User& u);
  void send_add_user(const User& u);
  int32_t recv_add_user();
  void get_all_users(std::vector<User> & _return);
  void send_get_all_users();
  void recv_get_all_users(std::vector<User> & _return);
  void get_user(User& _return, const int32_t uid);
  void send_get_user(const int32_t uid);
  void recv_get_user(User& _return);
  void clear_list();
  void send_clear_list();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserManagerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<UserManagerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UserManagerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_all_users(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clear_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserManagerProcessor(boost::shared_ptr<UserManagerIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &UserManagerProcessor::process_ping;
    processMap_["add_user"] = &UserManagerProcessor::process_add_user;
    processMap_["get_all_users"] = &UserManagerProcessor::process_get_all_users;
    processMap_["get_user"] = &UserManagerProcessor::process_get_user;
    processMap_["clear_list"] = &UserManagerProcessor::process_clear_list;
  }

  virtual ~UserManagerProcessor() {}
};

class UserManagerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserManagerProcessorFactory(const ::boost::shared_ptr< UserManagerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< UserManagerIfFactory > handlerFactory_;
};

class UserManagerMultiface : virtual public UserManagerIf {
 public:
  UserManagerMultiface(std::vector<boost::shared_ptr<UserManagerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserManagerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<UserManagerIf> > ifaces_;
  UserManagerMultiface() {}
  void add(boost::shared_ptr<UserManagerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  int32_t add_user(const User& u) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_user(u);
    }
    return ifaces_[i]->add_user(u);
  }

  void get_all_users(std::vector<User> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_users(_return);
    }
    ifaces_[i]->get_all_users(_return);
    return;
  }

  void get_user(User& _return, const int32_t uid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_user(_return, uid);
    }
    ifaces_[i]->get_user(_return, uid);
    return;
  }

  void clear_list() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clear_list();
    }
    ifaces_[i]->clear_list();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UserManagerConcurrentClient : virtual public UserManagerIf {
 public:
  UserManagerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserManagerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  int32_t add_user(const User& u);
  int32_t send_add_user(const User& u);
  int32_t recv_add_user(const int32_t seqid);
  void get_all_users(std::vector<User> & _return);
  int32_t send_get_all_users();
  void recv_get_all_users(std::vector<User> & _return, const int32_t seqid);
  void get_user(User& _return, const int32_t uid);
  int32_t send_get_user(const int32_t uid);
  void recv_get_user(User& _return, const int32_t seqid);
  void clear_list();
  void send_clear_list();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
