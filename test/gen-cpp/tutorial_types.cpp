/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "tutorial_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace tutorial {

int _kSexTypeValues[] = {
  SexType::MALE,
  SexType::FEMALE
};
const char* _kSexTypeNames[] = {
  "MALE",
  "FEMALE"
};
const std::map<int, const char*> _SexType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSexTypeValues, _kSexTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


User::~User() throw() {
}


void User::__set_firstname(const std::string& val) {
  this->firstname = val;
}

void User::__set_lastname(const std::string& val) {
  this->lastname = val;
}

void User::__set_user_id(const int32_t val) {
  this->user_id = val;
}

void User::__set_sex(const SexType::type val) {
  this->sex = val;
}

void User::__set_active(const bool val) {
  this->active = val;
}

void User::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->firstname);
          this->__isset.firstname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastname);
          this->__isset.lastname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->sex = (SexType::type)ecast0;
          this->__isset.sex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User");

  xfer += oprot->writeFieldBegin("firstname", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->firstname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastname", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->lastname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sex", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->sex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->active);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User &a, User &b) {
  using ::std::swap;
  swap(a.firstname, b.firstname);
  swap(a.lastname, b.lastname);
  swap(a.user_id, b.user_id);
  swap(a.sex, b.sex);
  swap(a.active, b.active);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

User::User(const User& other1) {
  firstname = other1.firstname;
  lastname = other1.lastname;
  user_id = other1.user_id;
  sex = other1.sex;
  active = other1.active;
  description = other1.description;
  __isset = other1.__isset;
}
User& User::operator=(const User& other2) {
  firstname = other2.firstname;
  lastname = other2.lastname;
  user_id = other2.user_id;
  sex = other2.sex;
  active = other2.active;
  description = other2.description;
  __isset = other2.__isset;
  return *this;
}
void User::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User(";
  out << "firstname=" << to_string(firstname);
  out << ", " << "lastname=" << to_string(lastname);
  out << ", " << "user_id=" << to_string(user_id);
  out << ", " << "sex=" << to_string(sex);
  out << ", " << "active=" << to_string(active);
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ")";
}


InvalidValueException::~InvalidValueException() throw() {
}


void InvalidValueException::__set_error_code(const int32_t val) {
  this->error_code = val;
}

void InvalidValueException::__set_error_msg(const std::string& val) {
  this->error_msg = val;
}

uint32_t InvalidValueException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->error_code);
          this->__isset.error_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error_msg);
          this->__isset.error_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidValueException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidValueException");

  xfer += oprot->writeFieldBegin("error_code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->error_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("error_msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->error_msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidValueException &a, InvalidValueException &b) {
  using ::std::swap;
  swap(a.error_code, b.error_code);
  swap(a.error_msg, b.error_msg);
  swap(a.__isset, b.__isset);
}

InvalidValueException::InvalidValueException(const InvalidValueException& other3) : TException() {
  error_code = other3.error_code;
  error_msg = other3.error_msg;
  __isset = other3.__isset;
}
InvalidValueException& InvalidValueException::operator=(const InvalidValueException& other4) {
  error_code = other4.error_code;
  error_msg = other4.error_msg;
  __isset = other4.__isset;
  return *this;
}
void InvalidValueException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidValueException(";
  out << "error_code=" << to_string(error_code);
  out << ", " << "error_msg=" << to_string(error_msg);
  out << ")";
}

const char* InvalidValueException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidValueException";
  }
}

} // namespace
