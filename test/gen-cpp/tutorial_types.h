/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tutorial_TYPES_H
#define tutorial_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace tutorial {

struct SexType {
  enum type {
    MALE = 1,
    FEMALE = 2
  };
};

extern const std::map<int, const char*> _SexType_VALUES_TO_NAMES;

typedef int32_t MyInteger;

class User;

class InvalidValueException;

typedef struct _User__isset {
  _User__isset() : firstname(false), lastname(false), user_id(true), sex(false), active(true), description(false) {}
  bool firstname :1;
  bool lastname :1;
  bool user_id :1;
  bool sex :1;
  bool active :1;
  bool description :1;
} _User__isset;

class User {
 public:

  User(const User&);
  User& operator=(const User&);
  User() : firstname(), lastname(), user_id(0), sex((SexType::type)0), active(false), description() {
  }

  virtual ~User() throw();
  std::string firstname;
  std::string lastname;
  int32_t user_id;
  SexType::type sex;
  bool active;
  std::string description;

  _User__isset __isset;

  void __set_firstname(const std::string& val);

  void __set_lastname(const std::string& val);

  void __set_user_id(const int32_t val);

  void __set_sex(const SexType::type val);

  void __set_active(const bool val);

  void __set_description(const std::string& val);

  bool operator == (const User & rhs) const
  {
    if (!(firstname == rhs.firstname))
      return false;
    if (!(lastname == rhs.lastname))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(sex == rhs.sex))
      return false;
    if (!(active == rhs.active))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(User &a, User &b);

inline std::ostream& operator<<(std::ostream& out, const User& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InvalidValueException__isset {
  _InvalidValueException__isset() : error_code(false), error_msg(false) {}
  bool error_code :1;
  bool error_msg :1;
} _InvalidValueException__isset;

class InvalidValueException : public ::apache::thrift::TException {
 public:

  InvalidValueException(const InvalidValueException&);
  InvalidValueException& operator=(const InvalidValueException&);
  InvalidValueException() : error_code(0), error_msg() {
  }

  virtual ~InvalidValueException() throw();
  int32_t error_code;
  std::string error_msg;

  _InvalidValueException__isset __isset;

  void __set_error_code(const int32_t val);

  void __set_error_msg(const std::string& val);

  bool operator == (const InvalidValueException & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_msg == rhs.error_msg))
      return false;
    return true;
  }
  bool operator != (const InvalidValueException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidValueException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidValueException &a, InvalidValueException &b);

inline std::ostream& operator<<(std::ostream& out, const InvalidValueException& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
