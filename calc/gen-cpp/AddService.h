/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AddService_H
#define AddService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "tutorial_types.h"

namespace calc {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AddServiceIf {
 public:
  virtual ~AddServiceIf() {}
  virtual int add(const int num1, const int num2) = 0;
};

class AddServiceIfFactory {
 public:
  typedef AddServiceIf Handler;

  virtual ~AddServiceIfFactory() {}

  virtual AddServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AddServiceIf* /* handler */) = 0;
};

class AddServiceIfSingletonFactory : virtual public AddServiceIfFactory {
 public:
  AddServiceIfSingletonFactory(const boost::shared_ptr<AddServiceIf>& iface) : iface_(iface) {}
  virtual ~AddServiceIfSingletonFactory() {}

  virtual AddServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AddServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<AddServiceIf> iface_;
};

class AddServiceNull : virtual public AddServiceIf {
 public:
  virtual ~AddServiceNull() {}
  int add(const int /* num1 */, const int /* num2 */) {
    int _return = 0;
    return _return;
  }
};

typedef struct _AddService_add_args__isset {
  _AddService_add_args__isset() : num1(false), num2(false) {}
  bool num1 :1;
  bool num2 :1;
} _AddService_add_args__isset;

class AddService_add_args {
 public:

  AddService_add_args(const AddService_add_args&);
  AddService_add_args& operator=(const AddService_add_args&);
  AddService_add_args() : num1(0), num2(0) {
  }

  virtual ~AddService_add_args() throw();
  int num1;
  int num2;

  _AddService_add_args__isset __isset;

  void __set_num1(const int val);

  void __set_num2(const int val);

  bool operator == (const AddService_add_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    return true;
  }
  bool operator != (const AddService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AddService_add_pargs {
 public:


  virtual ~AddService_add_pargs() throw();
  const int* num1;
  const int* num2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AddService_add_result__isset {
  _AddService_add_result__isset() : success(false) {}
  bool success :1;
} _AddService_add_result__isset;

class AddService_add_result {
 public:

  AddService_add_result(const AddService_add_result&);
  AddService_add_result& operator=(const AddService_add_result&);
  AddService_add_result() : success(0) {
  }

  virtual ~AddService_add_result() throw();
  int success;

  _AddService_add_result__isset __isset;

  void __set_success(const int val);

  bool operator == (const AddService_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AddService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AddService_add_presult__isset {
  _AddService_add_presult__isset() : success(false) {}
  bool success :1;
} _AddService_add_presult__isset;

class AddService_add_presult {
 public:


  virtual ~AddService_add_presult() throw();
  int* success;

  _AddService_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AddServiceClient : virtual public AddServiceIf {
 public:
  AddServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AddServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int add(const int num1, const int num2);
  void send_add(const int num1, const int num2);
  int recv_add();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AddServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AddServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AddServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AddServiceProcessor(boost::shared_ptr<AddServiceIf> iface) :
    iface_(iface) {
    processMap_["add"] = &AddServiceProcessor::process_add;
  }

  virtual ~AddServiceProcessor() {}
};

class AddServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AddServiceProcessorFactory(const ::boost::shared_ptr< AddServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AddServiceIfFactory > handlerFactory_;
};

class AddServiceMultiface : virtual public AddServiceIf {
 public:
  AddServiceMultiface(std::vector<boost::shared_ptr<AddServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AddServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AddServiceIf> > ifaces_;
  AddServiceMultiface() {}
  void add(boost::shared_ptr<AddServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int add(const int num1, const int num2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(num1, num2);
    }
    return ifaces_[i]->add(num1, num2);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AddServiceConcurrentClient : virtual public AddServiceIf {
 public:
  AddServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AddServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int add(const int num1, const int num2);
  int32_t send_add(const int num1, const int num2);
  int recv_add(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
